{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/UserLogin/UserLogin.js","components/AppBar/AppBar.js","redux/contacts/selectors.js","redux/contacts/operations.js","components/ContactForm/ContactForm.js","redux/contacts/actions.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App/App.js","redux/contacts/reducers.js","redux/store.js","index.js"],"names":["module","exports","UserLogin","useState","setEmail","setPassword","handleChange","e","target","name","value","reset","onSubmit","preventdefault","type","required","onChange","AppBar","getContacts","state","contacts","contactList","getFilter","contactFilter","getFilteredContacts","createSelector","lowerCasedFilter","toLowerCase","filter","includes","axios","defaults","baseURL","addContact","createAsyncThunk","contact","a","rejectWithValue","post","data","message","fetchContacts","_","get","removeContact","contactId","delete","id","ContactForm","setName","number","setNumber","useSelector","dispatch","useDispatch","className","s","contact__form","input__form","preventDefault","find","elem","alert","input__title","pattern","title","input__name","input__number","btn__add","filterContacts","createAction","Filter","filter__container","filter__title","filter__input","ContactList","useEffect","map","phone","contact__item","item","onClick__btn","onClick","App","createReducer","fulfilled","payload","persistConfig","key","version","storage","blacklist","contactReducer","combineReducers","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.f7625dd2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__3jZyl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__2ztXu\",\"filter__input\":\"Filter_filter__input__2zkKA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__1d3bS\",\"input__number\":\"ContactForm_input__number__2h2nS\",\"input__name\":\"ContactForm_input__name__rblk1\",\"input__title\":\"ContactForm_input__title__G4neL\",\"btn__add\":\"ContactForm_btn__add__2La8B\"};","import { useState } from 'react';\r\n\r\nexport default function UserLogin() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case 'email':\r\n        setEmail(value);\r\n        break;\r\n      case 'password':\r\n        setPassword(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventdefault();\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <span>Email</span>\r\n        <input type=\"text\" name=\"email\" required onChange={handleChange} />\r\n        <span>Password</span>\r\n        <input type=\"text\" name=\"singup\" onChange={handleChange} />\r\n      </label>\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n  );\r\n}\r\n","import UserLogin from '../UserLogin/UserLogin';\r\nexport default function AppBar() {\r\n  return (\r\n    <header>\r\n      <UserLogin />\r\n    </header>\r\n  );\r\n}\r\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.contactList;\n\nexport const getFilter = state => state.contacts.contactFilter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contactList, contactFilter) => {\n    const lowerCasedFilter = contactFilter.toLowerCase();\n    return contactList.filter(({ name }) =>\n      name.toLowerCase().includes(lowerCasedFilter),\n    );\n  },\n);\n","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://6198e96a164fa60017c2321d.mockapi.io/contacts';\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContacts',\n  async (contact, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.post(`/contacts`, contact);\n      return data;\n    } catch (error) {\n      rejectWithValue(error.message);\n    }\n  },\n);\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchContacts',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.get(`/contacts`);\n      return data;\n    } catch (error) {\n      rejectWithValue(error.message);\n    }\n  },\n);\n\nexport const removeContact = createAsyncThunk(\n  'contacts/removeContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const {\n        data: { id },\n      } = await axios.delete(`/contacts/${contactId}`);\n      return id;\n    } catch (error) {\n      rejectWithValue(error.message);\n    }\n  },\n);\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const allReadyPresentContact = contacts.find(\n      elem => elem.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (allReadyPresentContact) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.contact__form}>\n      <form className={s.input__form} onSubmit={handleSubmit}>\n        <label>\n          <span className={s.input__title}>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            className={s.input__name}\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          <span className={s.input__title}>Number</span>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            className={s.input__number}\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.btn__add}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const filterContacts = createAction('contact/filter');\n","import { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    dispatch(filterContacts(e.target.value)); // отправляем значение в redux\n  };\n\n  return (\n    <div className={s.filter__container}>\n      <label className={s.filter__title}>\n        Find contacts by name\n        <input\n          className={s.filter__input}\n          type=\"text\"\n          value={filter}\n          name=\"name\"\n          onChange={handleFilterChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import s from './ContactList.module.css';\nimport { fetchContacts, removeContact } from '../../redux/contacts/operations';\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nexport default function ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {contacts.map(({ name, phone, id }) => (\n          <li key={id} className={s.contact__item}>\n            <p className={s.item}>{name}:</p>\n            <p className={s.item}>{phone}</p>\n            <button\n              key={id}\n              type=\"button\"\n              className={s.onClick__btn}\n              onClick={() => dispatch(removeContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import './App.css';\nimport AppBar from '../AppBar/AppBar';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\n\nexport default function App() {\n  return (\n    <div className=\"Container\">\n      <AppBar />\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { createReducer } from '@reduxjs/toolkit';\nimport { addContact, fetchContacts, removeContact } from './operations';\nimport { filterContacts } from './actions';\n\nexport const contactList = createReducer([], {\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\n  [removeContact.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nexport const contactFilter = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { contactList, contactFilter } from './contacts/reducers';\n\nimport logger from 'redux-logger';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'contacts',\n  version: 1,\n  storage,\n  blacklist: ['contactFilter'],\n};\n\nconst contactReducer = combineReducers({\n  contactList,\n  contactFilter,\n});\n\nexport const store = configureStore({\n  reducer: { contacts: persistReducer(persistConfig, contactReducer) },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n//импорт компонента Provider\nimport { Provider } from 'react-redux';\n//импорт глобального состояния\nimport { store, persistor } from './redux/store';\n//импорт компонента PersistGate\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor} loading={null}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}